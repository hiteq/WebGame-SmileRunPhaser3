{"version":3,"sources":["app.js"],"names":["console","clear","player","ground","ground_texture","bg1","bg2","bg3","box","box_0","box_1","box_2","box_3","heart","deadline","blocks","boxes","platforms","hearts","particles","emitter","tween","GRAVITY","JUMP","speed","box_rate","box_speed","position_y","config","type","Phaser","AUTO","width","Math","min","max","window","innerWidth","height","backgroundColor","parent","pixelArt","physics","default","arcade","gravity","y","debug","scene","preload","create","update","log","load","image","on","error","add","setOrigin","setDisplaySize","staticGroup","group","rectangle","existing","sprite","setBounce","setCollideWorldBounds","collider","deadlineRect","input","keyboard","event","code","body","touching","down","setVelocityY","time","addEvent","delay","callback","createBox","callbackScope","loop","boxType","RND","pick","boxSpeed","boxY","setVelocityX","overlap","hitBox","destroy","x","game","Game"],"mappings":"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","file":"app.9464f9a9.js","sourceRoot":"..","sourcesContent":["// import Phaser from \"phaser\";\n\nconsole.clear();\n\n//game balance\nvar GRAVITY = 2000;\nvar JUMP = 700;\nvar speed = 100;\nvar box_rate = 500;\nvar box_speed = [3.5, 5, 10];\nvar position_y = [55, 50, 60, 65];\n\n//usage\nvar player;\nvar ground;\nvar ground_texture;\nvar bg1, bg2, bg3;\nvar box;\nvar box_0, box_1, box_2, box_3;\nvar heart;\nvar deadline;\n\n// groups\nvar blocks;\nvar boxes;\nvar platforms;\nvar hearts;\n\nvar particles;\nvar emitter;\nvar tween;\n\n// game engine setting\nconst config = {\n  type: Phaser.AUTO,\n  width: Math.min(Math.max(320, window.innerWidth), 640),\n  height: 208,\n  backgroundColor: \"#87CEEB\",\n  parent: \"gameframe\",\n  pixelArt: true,\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      gravity: { y: GRAVITY },\n      debug: false\n    }\n  },\n  scene: {\n    preload: preload,\n    create: create,\n    update: update\n  }\n};\n\n// 에셋 로딩\nfunction preload() {\n  console.log(\"에셋 로딩 시작\");\n  \n  // 배경 이미지 로딩\n  this.load.image(\"bg1\", \"assets/bg1.png\");\n  this.load.image(\"bg2\", \"assets/bg2.png\");\n  this.load.image(\"bg3\", \"assets/bg3.png\");\n  \n  // 게임 요소 로딩\n  this.load.image(\"player\", \"assets/smile_jump_14.png\");\n  this.load.image(\"box_g\", \"assets/box_g_1.png\");\n  this.load.image(\"box_a\", \"assets/box_a_1.png\");\n  this.load.image(\"box_g9\", \"assets/box_g9_1.png\");\n  this.load.image(\"box_smile\", \"assets/box_smile_1.png\");\n  this.load.image(\"heart\", \"assets/heart.png\");\n  \n  // 로딩 이벤트 리스너\n  this.load.on('complete', () => {\n    console.log('모든 에셋 로딩 완료');\n  });\n  \n  this.load.on('loaderror', (error) => {\n    console.error('에셋 로딩 에러:', error);\n  });\n}\n\n// 게임 생성\nfunction create() {\n  console.log(\"게임 생성 시작\");\n  \n  // 배경 이미지 추가\n  bg1 = this.add.image(0, 0, \"bg1\").setOrigin(0, 0);\n  bg2 = this.add.image(0, 0, \"bg2\").setOrigin(0, 0);\n  bg3 = this.add.image(0, 0, \"bg3\").setOrigin(0, 0);\n  \n  // 배경 크기 조정\n  bg1.setDisplaySize(config.width, config.height);\n  bg2.setDisplaySize(config.width, config.height);\n  bg3.setDisplaySize(config.width, config.height);\n  \n  // 그룹 생성\n  blocks = this.physics.add.staticGroup();\n  boxes = this.physics.add.group();\n  platforms = this.physics.add.staticGroup();\n  hearts = this.physics.add.group();\n  \n  // 바닥 생성 (시각적으로 보이는 바닥)\n  ground = this.add.rectangle(config.width / 2, config.height - 10, config.width, 20, 0x228B22);\n  this.physics.add.existing(ground, true);\n  \n  // 플레이어 생성\n  player = this.physics.add.sprite(72, config.height - 50, \"player\");\n  player.setBounce(0.2);\n  player.setCollideWorldBounds(true);\n  player.setDisplaySize(32, 32);\n  \n  // 플레이어와 바닥 충돌 설정\n  this.physics.add.collider(player, ground);\n  \n  // 데드라인 생성\n  deadline = this.physics.add.staticGroup();\n  var deadlineRect = this.add.rectangle(-50, config.height / 2, 20, config.height, 0xFF0000);\n  deadline.add(deadlineRect);\n  \n  // 키보드 입력 설정\n  this.input.keyboard.on('keydown', (event) => {\n    if (event.code === 'Space' && player.body.touching.down) {\n      player.setVelocityY(-JUMP);\n    }\n  });\n  \n  // 터치/클릭 입력 설정\n  this.input.on('pointerdown', () => {\n    if (player.body.touching.down) {\n      player.setVelocityY(-JUMP);\n    }\n  });\n  \n  // 박스 생성 타이머\n  this.time.addEvent({\n    delay: box_rate,\n    callback: createBox,\n    callbackScope: this,\n    loop: true\n  });\n  \n  console.log(\"게임 생성 완료\");\n}\n\n// 박스 생성 함수\nfunction createBox() {\n  var boxType = Phaser.Math.RND.pick([\"box_g\", \"box_a\", \"box_g9\", \"box_smile\"]);\n  var boxSpeed = Phaser.Math.RND.pick(box_speed);\n  var boxY = Phaser.Math.RND.pick(position_y);\n  \n  box = this.physics.add.sprite(config.width + 50, config.height - boxY, boxType);\n  box.setVelocityX(-boxSpeed * speed);\n  box.setDisplaySize(32, 32);\n  boxes.add(box);\n  \n  // 박스와 플레이어 충돌\n  this.physics.add.overlap(player, box, hitBox, null, this);\n  \n  // 박스와 바닥 충돌\n  this.physics.add.collider(box, ground);\n  \n  // 박스가 데드라인을 지나면 제거\n  this.physics.add.overlap(box, deadline, (box, deadline) => {\n    box.destroy();\n  }, null, this);\n}\n\n// 박스 충돌 함수\nfunction hitBox(player, box) {\n  console.log(\"박스 충돌!\");\n  box.destroy();\n  // 여기에 점수 증가나 다른 효과 추가 가능\n}\n\n// 게임 업데이트\nfunction update() {\n  // 플레이어 이동\n  player.setVelocityX(speed);\n  \n  // 배경 스크롤링\n  bg1.x -= 0.5;\n  bg2.x -= 1;\n  bg3.x -= 1.5;\n  \n  // 배경이 화면을 벗어나면 리셋\n  if (bg1.x <= -config.width) bg1.x = 0;\n  if (bg2.x <= -config.width) bg2.x = 0;\n  if (bg3.x <= -config.width) bg3.x = 0;\n}\n\n// 게임 시작\nconsole.log(\"게임 초기화 시작\");\nconst game = new Phaser.Game(config);\nconsole.log(\"게임 생성 완료:\", game);\n"]}